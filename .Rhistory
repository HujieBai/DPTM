du <- matrix(m0$model$duit,tt - 1)
dy <- matrix(m0$model$dy0,tt - 1)
dfit <- dy - du
m0s <- as.vector(m0$ssemin)
}
set.seed(seeds)
m1 <- DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,sro = sro)
m1s <- as.vector(m1$ssemin)
cat("\n","Bootstrap:","\n")
cat("\n","Parallel: ",parallel,"\n")
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m1s <- as.vector(m1$ssemin)
cat("\n","Bootstrap:","\n")
cat("\n","Parallel: ",parallel,"\n")
LRs = (m0s - m1s)/(m1s/((tt-2)*nn))
btprocedure = function(j){
set.seed(j)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(j)
ins <- utils::capture.output(m1b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
jj = j
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m0bs <- as.vector(m0b$ssemin)
m1bs <- as.vector(m1b$ssemin)
LRsb = (m0bs - m1bs)/(m1bs/((tt-2)*nn))
pbt = "No"
if(LRsb>=LRs){
pbt = "exceeded"
}
cat("\n")
cat(j,"/",bt,pbt)
cat("\n")
return(LRsb)
}
Btimes <- bt
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, function(x) {
bt_p = btprocedure(x)
return(bt_p)
})
btprocedure = function(j){
set.seed(j)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(j)
ins <- utils::capture.output(m1b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
jj = j
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m0bs <- as.vector(m0b$ssemin)
m1bs <- as.vector(m1b$ssemin)
LRsb = (m0bs - m1bs)/(m1bs/((tt-2)*nn))
pbt = "No"
if(LRsb>=LRs){
pbt = "exceeded"
}
cat("\n")
cat(j,"/",bt,pbt)
cat("\n")
return(LRsb)
}
if(!isTRUE(parallel)){
FS = as.numeric(na.omit(purrr::map_dbl(1:bt,btprocedure)))
}else{
Btimes <- bt
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, function(x) {
bt_p = btprocedure(x)
return(bt_p)
})
stop_backend(backend)
}
Btimes <- bt
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, function(x) {
bt_p = btprocedure(x)
return(bt_p)
})
stop_backend(backend)
source("~/.active-rstudio-document")
Btimes <- bt
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, function(x) {
bt_p = btprocedure(x)
return(bt_p)
})
stop_backend(backend)
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, btprocedure)
stop_backend(backend)
,x1=NULL,tt,nn,Th=0,ms = 1000,burnin=1000,types = "DREAMzs",
,x1=NULL,tt,nn,Th=0,ms = 1000,burnin=1000,types = "DREAMzs",
,x1=NULL,tt,nn,Th=0,ms = 1000,burnin=1000,types = "DREAMzs",
,x1=NULL,tt,nn,Th=0,ms = 1000,burnin=1000,types = "DREAMzs",
,x1=NULL,tt,nn,Th=0,ms = 1000,burnin=1000){
btprocedure = function(j){
set.seed(j)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(j)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
jj = j
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m0bs <- as.vector(m0b$ssemin)
m1bs <- as.vector(m1b$ssemin)
LRsb = (m0bs - m1bs)/(m1bs/((tt-2)*nn))
pbt = "No"
if(LRsb>=LRs){
pbt = "exceeded"
}
cat("\n")
cat(j,"/",bt,pbt)
cat("\n")
return(LRsb)
}
btprocedure = function(j,y){
set.seed(j)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(j)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
jj = j
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m0bs <- as.vector(m0b$ssemin)
m1bs <- as.vector(m1b$ssemin)
LRsb = (m0bs - m1bs)/(m1bs/((tt-2)*nn))
pbt = "No"
if(LRsb>=LRs){
pbt = "exceeded"
}
cat("\n")
cat(j,"/",bt,pbt)
cat("\n")
return(LRsb)
}
btprocedure = function(j,y,y1=NULL,x=NULL,q,cvs=NULL,time_trend =FALSE,){
btprocedure = function(j,y,y1=NULL,x=NULL,q,cvs=NULL,time_trend =FALSE){
set.seed(j)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(j)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
jj = j
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m0bs <- as.vector(m0b$ssemin)
m1bs <- as.vector(m1b$ssemin)
LRsb = (m0bs - m1bs)/(m1bs/((tt-2)*nn))
pbt = "No"
if(LRsb>=LRs){
pbt = "exceeded"
}
cat("\n")
cat(j,"/",bt,pbt)
cat("\n")
return(LRsb)
}
,x1=NULL,tt,nn,Th=0){
btprocedure = function(j,y,y1=NULL,x=NULL,q,cvs=NULL,time_trend =FALSE,time_fix_effects=FALSE,
x1=NULL,tt,nn,Th=0,ms = 1000,burnin=1000,types = "DREAMzs",
ADs = FALSE,r0x=NULL,r1x=NULL,NoY = FALSE,assumption = 1,
restart = FALSE,Only_b = FALSE,w=NULL,var_u = NULL,
nCR = 3,autoburnin=TRUE,sro =0.1){
set.seed(j)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(j)
ins <- utils::capture.output(m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(j)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
jj = j
while("try-error" %in% class(m0b) | "try-error" %in% class(m1b)){
jj = jj + 1000
set.seed(jj)
cy = sample(1:nn,nn,replace = TRUE)
dub = du[,cy]
dyb = matrix(dfit + dub,ncol = 1)
if(Th == 0){
set.seed(jj)
ins <- utils::capture.output(m0b <- try(DPTM::DPML(y=y,y1=y1,x=cbind(x,cvs),w=w,var_u = var_u,tt,nn,assumption = assumption,
time_trend = time_trend,time_fix_effects=time_fix_effects,restart = restart,
x1=x1,Only_b = Only_b,delty0=dyb)))
}else{
set.seed(jj)
ins <- utils::capture.output( m0b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
set.seed(jj)
ins <- utils::capture.output(m1b <- try(DPTM::DPTS(y=y,y1=y1,x=x,q=q,cvs=cvs,time_trend =time_trend,time_fix_effects=time_fix_effects
,x1=x1,tt=tt,nn=nn,Th=Th+1,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart = restart,Only_b = Only_b,w=w,var_u = var_u,
nCR = nCR,autoburnin=autoburnin,delty0=dyb,sro = sro)))
}
m0bs <- as.vector(m0b$ssemin)
m1bs <- as.vector(m1b$ssemin)
LRsb = (m0bs - m1bs)/(m1bs/((tt-2)*nn))
pbt = "No"
if(LRsb>=LRs){
pbt = "exceeded"
}
cat("\n")
cat(j,"/",bt,pbt)
cat("\n")
return(LRsb)
}
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, btprocedure,y=y,y1=y1,x=x,q=q,cvs=cvs,
time_trend =time_trend,time_fix_effects=time_fix_effects,
x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart =  restart,Only_b = Only_b,w=w,var_u =var_u,
nCR = nCR,autoburnin=autoburnin,sro =sro)
stop_backend(backend)
Btimes
Btimes <- bt
set_option("progress_track", TRUE)
backend <- start_backend(cores = 4, cluster_type = "psock", backend_type = "async")
configure_bar(type = "basic", style = 3)
FS <- parabar::par_sapply(backend, 1:Btimes, function(j) {
bt_p = btprocedure(j,y=y,y1=y1,x=x,q=q,cvs=cvs,
time_trend =time_trend,time_fix_effects=time_fix_effects,
x1=x1,tt=tt,nn=nn,Th=Th,ms = ms,burnin=burnin,types = types,
ADs = ADs,r0x=r0x,r1x=r1x,NoY = NoY,assumption = assumption,
restart =  restart,Only_b = Only_b,w=w,var_u =var_u,
nCR = nCR,autoburnin=autoburnin,sro =sro)
return(bt_p)
})
stop_backend(backend)
setwd("D:/my_work/Desktop/R1/Dp/NEW/DPTM")
Rcpp::compileAttributes()
devtools::document()
devtools::check()
Rcpp::compileAttributes()
devtools::document()
devtools::check()
builtins()
devtools::build()
