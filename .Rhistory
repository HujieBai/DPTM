xxx <- cbind(xxx,matrix(y1,ybl,ny)*rts0,h%*%matrix(y1,ybl,ny)*rts0)
}else{
xxx <- cbind(xxx,y1,h%*%y1)
}
# xx <- NULL
# wxx <- NULL
# w2xx <- NULL
# xx1 <- NULL
# wxx1 <- NULL
# w2xx1 <- NULL
rts0x <- NULL
#
# for (i in 1:ny) {
#   xx <- rbind(xx,lhx)
#   wxx <- rbind(wxx,whx)
#   w2xx <- rbind(w2xx,w2hx)
#   xx1 <- rbind(xx1,lhx1)
#   wxx1 <- rbind(wxx1,whx1)
#   w2xx1 <- rbind(w2xx1,w2hx1)
# }
xx <- lhx
wxx <- whx
w2xx <- w2hx
xx1 <- lhx1
wxx1 <- whx1
w2xx1 <- w2hx1
for (i in 1:nhx) {
rts0x <- cbind(rts0x,rts0)
}
xxx <- cbind(xxx,xx*rts0x,wxx*rts0x)
IVS <- cbind(IVS,xx*rts0x,xx1*rts0x,wxx*rts0x,wxx1*rts0x,w2xx*rts0x,
w2xx1*rts0x)
if(!is.null(x)){
if(isFALSE(Nox)){
xx <- NULL
wxx <- NULL
w2xx <- NULL
xx1 <- NULL
wxx1 <- NULL
w2xx1 <- NULL
rts0x <- NULL
for (i in 1:ny) {
xx <- rbind(xx,x)
wxx <- rbind(wxx,wx)
w2xx <- rbind(w2xx,w2x)
xx1 <- rbind(xx1,x1)
wxx1 <- rbind(wxx1,wx1)
w2xx1 <- rbind(w2xx1,w2x1)
}
xx <- matrix(xx,nrow = nrow(x))
wxx <- matrix(wxx,nrow = nrow(x))
w2xx <- matrix(w2xx,nrow = nrow(x))
xx1 <- matrix(xx1,nrow = nrow(x))
wxx1 <- matrix(wxx1,nrow = nrow(x))
w2xx1 <- matrix(w2xx1,nrow = nrow(x))
for (i in 1:ncol(x)) {
rts0x <- cbind(rts0x,rts0)
}
xxx <- cbind(xxx,xx*rts0x,wxx*rts0x)
IVS <- cbind(IVS,xx*rts0x,xx1*rts0x,wxx*rts0x,wxx1*rts0x,w2xx*rts0x,
w2xx1*rts0x)
}else{
xxx <- cbind(xxx,x,wx)
IVS <- cbind(IVS,x,x1,wx,wx1,w2x,w2x1)
}
}
if(!is.null(cvs)){
xxx <- cbind(xxx,cvs,wc)
IVS <- cbind(IVS,cvs,c1,wc,wc1,w2c,w2c1)
}
IVS <- tre(as.matrix(IVS),TT,nn)
xxxx <- xxx
xxx <- tre(as.matrix(xxx),TT,nn)
mx <- tsls_los(as.matrix(xxx),as.matrix(IVS),as.vector(yy))
betas <- as.vector(mx$betas)
betas_two <- betas[(nys+1):length(betas)]
Coefs0 <-  betas[1:nys]
idx2 <- xxxx[,(nys+1):length(betas)]
# idx2 <- mx$khat[,(nys+1):length(betas)]
XB <- idx2%*%betas_two
Sn <- 0
for (i in 1:length(hsh)) {
Sn <- Sn + Coefs0[i]*hsh[[i]]
}
Sn <- diag(ybl) - Sn
sse0 <- sum(as.matrix(Sn%*%y -XB)^2)
sse0
IVS
xxx
yy
rts <- matrix(q,nrow = ybl,ncol = (Th)) - matrix(ths,nrow  =ybl,ncol = Th,byrow = TRUE)
rts[which(rts>0,arr.ind = TRUE)] <- 1
rts[which(rts<=0,arr.ind = TRUE)] <- 0
rts0 <- cbind(rep(1,ybl),rts)
rts0
for (i in 1:(ncol(rts0)-1)) {
rts0[,i] <- rts0[,i] - rts0[,i+1]
}
rts0
xxx <- NULL
IVS <- NULL
lhx <- NULL
lhx1 <- NULL
for (i in 1:nhx) {
thetai <- thetas[i,]
for (j in 1:ny) {
lhx <- cbind(lhx,(hx[,(m*(i-1)+1):(i*m)])%*%nealmonc(c(1,thetai[(1+2*(j-1)):(2*j)]),m))
}
}
lhx
ny
i=2
thetai <- thetas[i,]
thetai
rm(thetai)
rm(i)
thetas
thetas = t(as.matrix(as.vector(thetas)))
for (i in 1:nhx) {
thetai <- thetas[i,]
for (j in 1:ny) {
lhx <- cbind(lhx,(hx[,(m*(i-1)+1):(i*m)])%*%nealmonc(c(1,thetai[(1+2*(j-1)):(2*j)]),m))
}
}
lhx1 <- lag_transform(lhx,tt,nn,1,TRUE)
lhx <- lag_transform(lhx,tt,nn,1,FALSE)
whx <- h%*%lhx
w2hx <- h2%*%lhx
whx1 <- h%*%lhx1
w2hx1 <- h2%*%lhx1
hsh <- list()
if(isFALSE(NoWy)){
xxx <- cbind(xxx,h%*%matrix(y,ybl,ny)*rts0)
for (i in 1:ncol(rts0)) {
hsh[[i]] <- (diag(as.vector(rts0[,i]))%*%h)
}
}else{
xxx <- cbind(xxx,h%*%y)
hsh[[1]] <- h
}
if(isFALSE(Noy1)){
xxx <- cbind(xxx,matrix(y1,ybl,ny)*rts0,h%*%matrix(y1,ybl,ny)*rts0)
}else{
xxx <- cbind(xxx,y1,h%*%y1)
}
# xx <- NULL
# wxx <- NULL
# w2xx <- NULL
# xx1 <- NULL
# wxx1 <- NULL
# w2xx1 <- NULL
rts0x <- NULL
#
# for (i in 1:ny) {
#   xx <- rbind(xx,lhx)
#   wxx <- rbind(wxx,whx)
#   w2xx <- rbind(w2xx,w2hx)
#   xx1 <- rbind(xx1,lhx1)
#   wxx1 <- rbind(wxx1,whx1)
#   w2xx1 <- rbind(w2xx1,w2hx1)
# }
xx <- lhx
wxx <- whx
w2xx <- w2hx
xx1 <- lhx1
wxx1 <- whx1
w2xx1 <- w2hx1
for (i in 1:nhx) {
rts0x <- cbind(rts0x,rts0)
}
xxx <- cbind(xxx,xx*rts0x,wxx*rts0x)
rts <- matrix(q,nrow = ybl,ncol = (Th)) - matrix(ths,nrow  =ybl,ncol = Th,byrow = TRUE)
rts[which(rts>0,arr.ind = TRUE)] <- 1
rts[which(rts<=0,arr.ind = TRUE)] <- 0
rts0 <- cbind(rep(1,ybl),rts)
ths
thetas
thetas[1,2] = 0
thetas[1,3] = -0.5
thetas
rts <- matrix(q,nrow = ybl,ncol = (Th)) - matrix(ths,nrow  =ybl,ncol = Th,byrow = TRUE)
rts[which(rts>0,arr.ind = TRUE)] <- 1
rts[which(rts<=0,arr.ind = TRUE)] <- 0
rts0 <- cbind(rep(1,ybl),rts)
for (i in 1:(ncol(rts0)-1)) {
rts0[,i] <- rts0[,i] - rts0[,i+1]
}
xxx <- NULL
IVS <- NULL
lhx <- NULL
lhx1 <- NULL
for (i in 1:nhx) {
thetai <- thetas[i,]
for (j in 1:ny) {
lhx <- cbind(lhx,(hx[,(m*(i-1)+1):(i*m)])%*%nealmonc(c(1,thetai[(1+2*(j-1)):(2*j)]),m))
}
}
lhx1 <- lag_transform(lhx,tt,nn,1,TRUE)
lhx <- lag_transform(lhx,tt,nn,1,FALSE)
whx <- h%*%lhx
w2hx <- h2%*%lhx
whx1 <- h%*%lhx1
w2hx1 <- h2%*%lhx1
hsh <- list()
if(isFALSE(NoWy)){
xxx <- cbind(xxx,h%*%matrix(y,ybl,ny)*rts0)
for (i in 1:ncol(rts0)) {
hsh[[i]] <- (diag(as.vector(rts0[,i]))%*%h)
}
}else{
xxx <- cbind(xxx,h%*%y)
hsh[[1]] <- h
}
if(isFALSE(Noy1)){
xxx <- cbind(xxx,matrix(y1,ybl,ny)*rts0,h%*%matrix(y1,ybl,ny)*rts0)
}else{
xxx <- cbind(xxx,y1,h%*%y1)
}
# xx <- NULL
# wxx <- NULL
# w2xx <- NULL
# xx1 <- NULL
# wxx1 <- NULL
# w2xx1 <- NULL
rts0x <- NULL
#
# for (i in 1:ny) {
#   xx <- rbind(xx,lhx)
#   wxx <- rbind(wxx,whx)
#   w2xx <- rbind(w2xx,w2hx)
#   xx1 <- rbind(xx1,lhx1)
#   wxx1 <- rbind(wxx1,whx1)
#   w2xx1 <- rbind(w2xx1,w2hx1)
# }
xx <- lhx
wxx <- whx
w2xx <- w2hx
xx1 <- lhx1
wxx1 <- whx1
w2xx1 <- w2hx1
for (i in 1:nhx) {
rts0x <- cbind(rts0x,rts0)
}
xxx <- cbind(xxx,xx*rts0x,wxx*rts0x)
IVS <- cbind(IVS,xx*rts0x,xx1*rts0x,wxx*rts0x,wxx1*rts0x,w2xx*rts0x,
w2xx1*rts0x)
if(!is.null(x)){
if(isFALSE(Nox)){
xx <- NULL
wxx <- NULL
w2xx <- NULL
xx1 <- NULL
wxx1 <- NULL
w2xx1 <- NULL
rts0x <- NULL
for (i in 1:ny) {
xx <- rbind(xx,x)
wxx <- rbind(wxx,wx)
w2xx <- rbind(w2xx,w2x)
xx1 <- rbind(xx1,x1)
wxx1 <- rbind(wxx1,wx1)
w2xx1 <- rbind(w2xx1,w2x1)
}
xx <- matrix(xx,nrow = nrow(x))
wxx <- matrix(wxx,nrow = nrow(x))
w2xx <- matrix(w2xx,nrow = nrow(x))
xx1 <- matrix(xx1,nrow = nrow(x))
wxx1 <- matrix(wxx1,nrow = nrow(x))
w2xx1 <- matrix(w2xx1,nrow = nrow(x))
for (i in 1:ncol(x)) {
rts0x <- cbind(rts0x,rts0)
}
xxx <- cbind(xxx,xx*rts0x,wxx*rts0x)
IVS <- cbind(IVS,xx*rts0x,xx1*rts0x,wxx*rts0x,wxx1*rts0x,w2xx*rts0x,
w2xx1*rts0x)
}else{
xxx <- cbind(xxx,x,wx)
IVS <- cbind(IVS,x,x1,wx,wx1,w2x,w2x1)
}
}
if(!is.null(cvs)){
xxx <- cbind(xxx,cvs,wc)
IVS <- cbind(IVS,cvs,c1,wc,wc1,w2c,w2c1)
}
IVS <- tre(as.matrix(IVS),TT,nn)
xxxx <- xxx
xxx <- tre(as.matrix(xxx),TT,nn)
xxx
mx <- tsls_los(as.matrix(xxx),as.matrix(IVS),as.vector(yy))
betas <- as.vector(mx$betas)
betas_two <- betas[(nys+1):length(betas)]
Coefs0 <-  betas[1:nys]
idx2 <- xxxx[,(nys+1):length(betas)]
# idx2 <- mx$khat[,(nys+1):length(betas)]
XB <- idx2%*%betas_two
Sn <- 0
for (i in 1:length(hsh)) {
Sn <- Sn + Coefs0[i]*hsh[[i]]
}
Sn <- diag(ybl) - Sn
sse0 <- sum(as.matrix(Sn%*%y -XB)^2)
sse0
m1b$ssemin
betas
m1b$ssemin
m1b$coefs
install.packages("knitr")
library(knitr)
install.packages("tinytex")
library(tinytex)
# Chunk 1: data
data("quine", package = "MASS")
# Chunk 2: poisson
m_pois <- glm(Days ~ (Eth + Sex + Age + Lrn)^2, data = quine,
family = poisson)
# Chunk 3: negbin
library("MASS")
m_nbin <- glm.nb(Days ~ (Eth + Sex + Age + Lrn)^2, data = quine)
# Chunk 4: comparison
BIC(m_pois, m_nbin)
# Chunk 5: summary
summary(m_nbin)
install.packages("D:/my_work/Desktop/R1/Dp/NEW/DPTM_1.3.5.tar.gz", repos = NULL, type = "source")
library(DPTM)
urlchecker::url_check()
setwd("D:/my_work/Desktop/R1/Dp/NEW/DPTM")
D:/my_work/Desktop/R1/Dp/NEW/DPTM/R/thresholdS.R
urlchecker::url_check()
Rcpp::compileAttributes()
library(devtools)
document()
urlchecker::url_check()
urlchecker::url_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
usethis::use_version('patch')
devtools::submit_cran()
install.packages("zoomgrid")
install_github('cran/zoomgrid')
library(zoomgrid)
ndim = 2 # number of dimension
nA = 10 # parameter A
# vx in [-5.12, 5.12]
# minimizer = rep(0, ndim)
# minimum = 0
Rastrigin <- function(vx) return(nA * ndim + sum(vx*vx - nA * cos(2*pi*vx)))
par = runif(ndim, -5.12, 5.12)
cat("start from", par)
optim(par = par, Rastrigin, method='Nelder-Mead')
optim(par = par, Rastrigin, method='BFGS')
optim(par = par, Rastrigin, method='L-BFGS-B')
optim(par = par, Rastrigin, method='SANN')
bin = c(from=-5.12, to=5.12, by=.5)
grid = build_grid(bin,bin)
# serial computation
ret0 = grid_search(Rastrigin, grid, silent=FALSE)
ret0$par
# We can build a finer grid
bin = c(from=-5.12, to=5.12, by=.1)
grid = build_grid(bin,bin)
# serial computation
ret1 = grid_search(Rastrigin, grid, silent=FALSE)
ret1$par
# parallel computation
ret2 = grid_search(Rastrigin, grid, num=2, parallel=TRUE, silent=FALSE)
# parallel computation
ret2 = grid_search(Rastrigin, grid, num=2, parallel=TRUE, silent=FALSE)
dgp3 = function(tt,nn,b1=-0.7,c1=1,b2=0.5,b3=0.5,c2=1,c3=1,aa=2,db=0.5,dc=1,da=1,r0=-0.5,r1=0,r1=0.5,sd1=2,sd2=4,ts=1){
# tt1 = tt
# tt = tt+31
tt = tt+ts
N = nn
sz = tt*N
# qit = rnorm(sz,0.2)
qit = runif(sz,-1,1)
sit = rnorm(sz)
zit = rnorm(sz)
ei = rnorm(nn,2,3)
ai = ei+colMeans(matrix(qit,nrow = tt))
ai = matrix(ai,tt,N,byrow = TRUE)
yit = matrix(0,tt,N)
q = matrix(qit,tt,N)
z = matrix(zit,tt,N)
s = matrix(sit,tt,N)
# rt = r0+r1*sit
regime2 = ifelse(q>r0,1,0)
regime2 = matrix(regime2,tt,N)
regime3 = ifelse(q>r1,1,0)
regime3 = matrix(regime3,tt,N)
regime4 = ifelse(q>r2,1,0)
regime4 = matrix(regime4,tt,N)
uit =matrix(rnorm(sz,sd=sd1),tt,N)
uit1 = uit[-1,] - uit[-tt,]
yit[1,] = ai[1,]
for (i in 2:tt) {
if(i==2){
yit[i,] = db*matrix(1,1,N)+dc*(q[i,]-q[i-1,])+da*(z[i,]-z[i-1,])+rnorm(N,sd=sd2)+yit[i-1,]
}else{
yit[i,] = b1*(yit[i-1,]-yit[i-2,])+c1*(q[i,]-q[i-1,])+
b2*((yit[i-1,])*(regime2[i,])-(yit[i-2,])*(regime2[i-1,]))+b3*((yit[i-1,])*(regime3[i,])-(yit[i-2,])*(regime3[i-1,]))+b3*((yit[i-1,])*(regime4[i,])-(yit[i-2,])*(regime4[i-1,]))+
c2*((q[i,])*(regime2[i,])-(q[i-1,])*(regime2[i-1,]))+
c3*((q[i,])*(regime3[i,])-(q[i-1,])*(regime3[i-1,]))+c3*((q[i,])*(regime4[i,])-(q[i-1,])*(regime4[i-1,]))+aa*(z[i,]-z[i-1,])+uit1[i-1,]+yit[i-1,]
#yit[i,] = ai[i,]+b1*yit[i-1,]+c1*q[i,]+b2*yit[i-1,]*regime2[i,]+c2*q[i,]*regime2[i,]+aa*z[i,]+rnorm(N)
}
}
tts <- ts + 1
yit = yit[tts:tt,]
qit = as.vector(matrix(qit,ncol = nn)[tts:tt,])
zit = as.vector(matrix(zit,ncol = nn)[tts:tt,])
sit = as.vector(matrix(sit,ncol = nn)[tts:tt,])
tt = tt-ts
return(list(y=as.vector(yit),q=qit,x=as.matrix(qit),z=as.matrix(zit),st = as.matrix(sit),tt=tt,nn=nn,re2 = regime2))
}
dgp3 = function(tt,nn,b1=-0.7,c1=1,b2=0.5,b3=0.5,c2=1,c3=1,aa=2,db=0.5,dc=1,da=1,r0=-0.5,r1=0,r2=0.5,sd1=2,sd2=4,ts=1){
# tt1 = tt
# tt = tt+31
tt = tt+ts
N = nn
sz = tt*N
# qit = rnorm(sz,0.2)
qit = runif(sz,-1,1)
sit = rnorm(sz)
zit = rnorm(sz)
ei = rnorm(nn,2,3)
ai = ei+colMeans(matrix(qit,nrow = tt))
ai = matrix(ai,tt,N,byrow = TRUE)
yit = matrix(0,tt,N)
q = matrix(qit,tt,N)
z = matrix(zit,tt,N)
s = matrix(sit,tt,N)
# rt = r0+r1*sit
regime2 = ifelse(q>r0,1,0)
regime2 = matrix(regime2,tt,N)
regime3 = ifelse(q>r1,1,0)
regime3 = matrix(regime3,tt,N)
regime4 = ifelse(q>r2,1,0)
regime4 = matrix(regime4,tt,N)
uit =matrix(rnorm(sz,sd=sd1),tt,N)
uit1 = uit[-1,] - uit[-tt,]
yit[1,] = ai[1,]
for (i in 2:tt) {
if(i==2){
yit[i,] = db*matrix(1,1,N)+dc*(q[i,]-q[i-1,])+da*(z[i,]-z[i-1,])+rnorm(N,sd=sd2)+yit[i-1,]
}else{
yit[i,] = b1*(yit[i-1,]-yit[i-2,])+c1*(q[i,]-q[i-1,])+
b2*((yit[i-1,])*(regime2[i,])-(yit[i-2,])*(regime2[i-1,]))+b3*((yit[i-1,])*(regime3[i,])-(yit[i-2,])*(regime3[i-1,]))+b3*((yit[i-1,])*(regime4[i,])-(yit[i-2,])*(regime4[i-1,]))+
c2*((q[i,])*(regime2[i,])-(q[i-1,])*(regime2[i-1,]))+
c3*((q[i,])*(regime3[i,])-(q[i-1,])*(regime3[i-1,]))+c3*((q[i,])*(regime4[i,])-(q[i-1,])*(regime4[i-1,]))+aa*(z[i,]-z[i-1,])+uit1[i-1,]+yit[i-1,]
#yit[i,] = ai[i,]+b1*yit[i-1,]+c1*q[i,]+b2*yit[i-1,]*regime2[i,]+c2*q[i,]*regime2[i,]+aa*z[i,]+rnorm(N)
}
}
tts <- ts + 1
yit = yit[tts:tt,]
qit = as.vector(matrix(qit,ncol = nn)[tts:tt,])
zit = as.vector(matrix(zit,ncol = nn)[tts:tt,])
sit = as.vector(matrix(sit,ncol = nn)[tts:tt,])
tt = tt-ts
return(list(y=as.vector(yit),q=qit,x=as.matrix(qit),z=as.matrix(zit),st = as.matrix(sit),tt=tt,nn=nn,re2 = regime2))
}
da1 <- dgp3(5,50,ts=30)
m1 <- try(DPTM::DPTS(y=da1$y,q=da1$q,y1=NULL,x=da1$x,cvs = da1$z,w=NULL,var_u = NULL,tt=da1$tt,nn=da1$nn,
restart = FALSE,x1=NULL,Only_b = FALSE,Th=3,ms=2000,burnin = 2000))
dgp3 = function(tt,nn,b1=-0.7,c1=1,b2=0.5,b3=0.5,c2=1,c3=1,aa=2,db=0.5,dc=1,da=1,r0=-0.5,r1=0,r2=0.5,sd1=2,sd2=4,ts=1){
# tt1 = tt
# tt = tt+31
tt = tt+ts
N = nn
sz = tt*N
# qit = rnorm(sz,0.2)
qit = runif(sz,-1,1)
sit = rnorm(sz)
zit = rnorm(sz)
ei = rnorm(nn,2,3)
ai = ei+colMeans(matrix(qit,nrow = tt))
ai = matrix(ai,tt,N,byrow = TRUE)
yit = matrix(0,tt,N)
q = matrix(qit,tt,N)
z = matrix(zit,tt,N)
s = matrix(sit,tt,N)
# rt = r0+r1*sit
regime2 = ifelse(q>r0,1,0)
regime2 = matrix(regime2,tt,N)
regime3 = ifelse(q>r1,1,0)
regime3 = matrix(regime3,tt,N)
regime4 = ifelse(q>r2,1,0)
regime4 = matrix(regime4,tt,N)
uit =matrix(rnorm(sz,sd=sd1),tt,N)
uit1 = uit[-1,] - uit[-tt,]
yit[1,] = ai[1,]
for (i in 2:tt) {
if(i==2){
yit[i,] = db*matrix(1,1,N)+dc*(q[i,]-q[i-1,])+da*(z[i,]-z[i-1,])+rnorm(N,sd=sd2)+yit[i-1,]
}else{
yit[i,] = b1*(yit[i-1,]-yit[i-2,])+c1*(q[i,]-q[i-1,])+
b2*((yit[i-1,])*(regime2[i,])-(yit[i-2,])*(regime2[i-1,]))+b3*((yit[i-1,])*(regime3[i,])-(yit[i-2,])*(regime3[i-1,]))+b3*((yit[i-1,])*(regime4[i,])-(yit[i-2,])*(regime4[i-1,]))+
c2*((q[i,])*(regime2[i,])-(q[i-1,])*(regime2[i-1,]))+
c3*((q[i,])*(regime3[i,])-(q[i-1,])*(regime3[i-1,]))+c3*((q[i,])*(regime4[i,])-(q[i-1,])*(regime4[i-1,]))+aa*(z[i,]-z[i-1,])+uit1[i-1,]+yit[i-1,]
#yit[i,] = ai[i,]+b1*yit[i-1,]+c1*q[i,]+b2*yit[i-1,]*regime2[i,]+c2*q[i,]*regime2[i,]+aa*z[i,]+rnorm(N)
}
}
tts <- ts + 1
yit = yit[tts:tt,]
qit = as.vector(matrix(qit,ncol = nn)[tts:tt,])
zit = as.vector(matrix(zit,ncol = nn)[tts:tt,])
sit = as.vector(matrix(sit,ncol = nn)[tts:tt,])
tt = tt-ts
return(list(y=as.vector(yit),q=qit,x=as.matrix(qit),z=as.matrix(zit),st = as.matrix(sit),tt=tt,nn=nn,re2 = regime2))
}
da1 <- dgp3(10,200,ts=30)
m1 <- try(DPTM::DPTS(y=da1$y,q=da1$q,y1=NULL,x=da1$x,cvs = da1$z,w=NULL,var_u = NULL,tt=da1$tt,nn=da1$nn,
restart = FALSE,x1=NULL,Only_b = FALSE,Th=3,ms=3000,burnin = 3000))
